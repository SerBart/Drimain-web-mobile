"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Drimain API
 * Minimalny zestaw endpointów startowych do unifikacji web + mobile.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.UserStatus = exports.UserRole = void 0;
const axios_1 = __importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.UserRole = {
    User: 'user',
    Admin: 'admin'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.UserStatus = {
    Active: 'active',
    Blocked: 'blocked'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Logowanie użytkownika
         * @param {AuthLoginPostRequest} authLoginPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (authLoginPostRequest, options = {}) => {
            // verify required parameter 'authLoginPostRequest' is not null or undefined
            (0, common_1.assertParamExists)('authLoginPost', 'authLoginPostRequest', authLoginPostRequest);
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authLoginPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Wylogowanie (unieważnienie refresh tokenu)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options = {}) => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Odświeżenie tokenu
         * @param {AuthRefreshPostRequest} authRefreshPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost: async (authRefreshPostRequest, options = {}) => {
            // verify required parameter 'authRefreshPostRequest' is not null or undefined
            (0, common_1.assertParamExists)('authRefreshPost', 'authRefreshPostRequest', authRefreshPostRequest);
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authRefreshPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Rejestracja użytkownika
         * @param {AuthRegisterPostRequest} authRegisterPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (authRegisterPostRequest, options = {}) => {
            // verify required parameter 'authRegisterPostRequest' is not null or undefined
            (0, common_1.assertParamExists)('authRegisterPost', 'authRegisterPostRequest', authRegisterPostRequest);
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authRegisterPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options = {}) => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Mój profil
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesMeGet: async (options = {}) => {
            const localVarPath = `/profiles/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Aktualizacja mojego profilu
         * @param {ProfileUpdateInput} profileUpdateInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesMePatch: async (profileUpdateInput, options = {}) => {
            // verify required parameter 'profileUpdateInput' is not null or undefined
            (0, common_1.assertParamExists)('profilesMePatch', 'profileUpdateInput', profileUpdateInput);
            const localVarPath = `/profiles/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(profileUpdateInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Podgląd profilu innego użytkownika
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUserIdGet: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('profilesUserIdGet', 'userId', userId);
            const localVarPath = `/profiles/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Dane zalogowanego użytkownika
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options = {}) => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Częściowa aktualizacja danych użytkownika
         * @param {UsersMePatchRequest} usersMePatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch: async (usersMePatchRequest, options = {}) => {
            // verify required parameter 'usersMePatchRequest' is not null or undefined
            (0, common_1.assertParamExists)('usersMePatch', 'usersMePatchRequest', usersMePatchRequest);
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersMePatchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Logowanie użytkownika
         * @param {AuthLoginPostRequest} authLoginPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(authLoginPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(authLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Wylogowanie (unieważnienie refresh tokenu)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Odświeżenie tokenu
         * @param {AuthRefreshPostRequest} authRefreshPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshPost(authRefreshPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshPost(authRefreshPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.authRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Rejestracja użytkownika
         * @param {AuthRegisterPostRequest} authRegisterPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(authRegisterPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(authRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Mój profil
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesMeGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.profilesMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Aktualizacja mojego profilu
         * @param {ProfileUpdateInput} profileUpdateInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesMePatch(profileUpdateInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesMePatch(profileUpdateInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.profilesMePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Podgląd profilu innego użytkownika
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesUserIdGet(userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.profilesUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Dane zalogowanego użytkownika
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.usersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Częściowa aktualizacja danych użytkownika
         * @param {UsersMePatchRequest} usersMePatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMePatch(usersMePatchRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMePatch(usersMePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.usersMePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Logowanie użytkownika
         * @param {AuthLoginPostRequest} authLoginPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(authLoginPostRequest, options) {
            return localVarFp.authLoginPost(authLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Wylogowanie (unieważnienie refresh tokenu)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options) {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Odświeżenie tokenu
         * @param {AuthRefreshPostRequest} authRefreshPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost(authRefreshPostRequest, options) {
            return localVarFp.authRefreshPost(authRefreshPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Rejestracja użytkownika
         * @param {AuthRegisterPostRequest} authRegisterPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(authRegisterPostRequest, options) {
            return localVarFp.authRegisterPost(authRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options) {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Mój profil
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesMeGet(options) {
            return localVarFp.profilesMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Aktualizacja mojego profilu
         * @param {ProfileUpdateInput} profileUpdateInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesMePatch(profileUpdateInput, options) {
            return localVarFp.profilesMePatch(profileUpdateInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Podgląd profilu innego użytkownika
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUserIdGet(userId, options) {
            return localVarFp.profilesUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Dane zalogowanego użytkownika
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options) {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Częściowa aktualizacja danych użytkownika
         * @param {UsersMePatchRequest} usersMePatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch(usersMePatchRequest, options) {
            return localVarFp.usersMePatch(usersMePatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary Logowanie użytkownika
     * @param {AuthLoginPostRequest} authLoginPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authLoginPost(authLoginPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).authLoginPost(authLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Wylogowanie (unieważnienie refresh tokenu)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authLogoutPost(options) {
        return (0, exports.DefaultApiFp)(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Odświeżenie tokenu
     * @param {AuthRefreshPostRequest} authRefreshPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authRefreshPost(authRefreshPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).authRefreshPost(authRefreshPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Rejestracja użytkownika
     * @param {AuthRegisterPostRequest} authRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authRegisterPost(authRegisterPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).authRegisterPost(authRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    healthGet(options) {
        return (0, exports.DefaultApiFp)(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Mój profil
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesMeGet(options) {
        return (0, exports.DefaultApiFp)(this.configuration).profilesMeGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Aktualizacja mojego profilu
     * @param {ProfileUpdateInput} profileUpdateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesMePatch(profileUpdateInput, options) {
        return (0, exports.DefaultApiFp)(this.configuration).profilesMePatch(profileUpdateInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Podgląd profilu innego użytkownika
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesUserIdGet(userId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).profilesUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Dane zalogowanego użytkownika
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    usersMeGet(options) {
        return (0, exports.DefaultApiFp)(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Częściowa aktualizacja danych użytkownika
     * @param {UsersMePatchRequest} usersMePatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    usersMePatch(usersMePatchRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).usersMePatch(usersMePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
