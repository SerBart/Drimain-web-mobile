/**
 * Drimain API
 * Minimalny zestaw endpointów startowych do unifikacji web + mobile.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthLoginPostRequest
 */
export interface AuthLoginPostRequest {
    /**
     *
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface AuthRefreshPostRequest
 */
export interface AuthRefreshPostRequest {
    /**
     *
     * @type {string}
     * @memberof AuthRefreshPostRequest
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface AuthRegisterPost201Response
 */
export interface AuthRegisterPost201Response {
    /**
     *
     * @type {User}
     * @memberof AuthRegisterPost201Response
     */
    'user': User;
    /**
     *
     * @type {AuthTokens}
     * @memberof AuthRegisterPost201Response
     */
    'tokens': AuthTokens;
}
/**
 *
 * @export
 * @interface AuthRegisterPostRequest
 */
export interface AuthRegisterPostRequest {
    /**
     *
     * @type {string}
     * @memberof AuthRegisterPostRequest
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof AuthRegisterPostRequest
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof AuthRegisterPostRequest
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface AuthTokens
 */
export interface AuthTokens {
    /**
     *
     * @type {string}
     * @memberof AuthTokens
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof AuthTokens
     */
    'refreshToken': string;
    /**
     * Czas ważności accessToken w sekundach
     * @type {number}
     * @memberof AuthTokens
     */
    'expiresIn': number;
    /**
     *
     * @type {string}
     * @memberof AuthTokens
     */
    'tokenType': string;
}
/**
 *
 * @export
 * @interface HealthGet200Response
 */
export interface HealthGet200Response {
    /**
     *
     * @type {string}
     * @memberof HealthGet200Response
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface NotificationPrefs
 */
export interface NotificationPrefs {
    /**
     *
     * @type {boolean}
     * @memberof NotificationPrefs
     */
    'email': boolean;
    /**
     *
     * @type {boolean}
     * @memberof NotificationPrefs
     */
    'push': boolean;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    'avatarUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    'bio'?: string | null;
    /**
     *
     * @type {NotificationPrefs}
     * @memberof Profile
     */
    'notifications': NotificationPrefs;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface ProfileUpdateInput
 */
export interface ProfileUpdateInput {
    /**
     *
     * @type {string}
     * @memberof ProfileUpdateInput
     */
    'avatarUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProfileUpdateInput
     */
    'bio'?: string | null;
    /**
     *
     * @type {NotificationPrefs}
     * @memberof ProfileUpdateInput
     */
    'notifications'?: NotificationPrefs;
}
/**
 * Wersja profilu do odczytu dla innych użytkowników (może zostać ograniczona później)
 * @export
 * @interface PublicProfile
 */
export interface PublicProfile {
    /**
     *
     * @type {string}
     * @memberof PublicProfile
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof PublicProfile
     */
    'avatarUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PublicProfile
     */
    'bio'?: string | null;
    /**
     *
     * @type {NotificationPrefs}
     * @memberof PublicProfile
     */
    'notifications': NotificationPrefs;
    /**
     *
     * @type {string}
     * @memberof PublicProfile
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     *
     * @type {UserRole}
     * @memberof User
     */
    'role': UserRole;
    /**
     *
     * @type {UserStatus}
     * @memberof User
     */
    'status': UserStatus;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserRole: {
    readonly User: "user";
    readonly Admin: "admin";
};
export type UserRole = typeof UserRole[keyof typeof UserRole];
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserStatus: {
    readonly Active: "active";
    readonly Blocked: "blocked";
};
export type UserStatus = typeof UserStatus[keyof typeof UserStatus];
/**
 *
 * @export
 * @interface UsersMePatchRequest
 */
export interface UsersMePatchRequest {
    /**
     *
     * @type {string}
     * @memberof UsersMePatchRequest
     */
    'name'?: string | null;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Logowanie użytkownika
     * @param {AuthLoginPostRequest} authLoginPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost: (authLoginPostRequest: AuthLoginPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Wylogowanie (unieważnienie refresh tokenu)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutPost: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Odświeżenie tokenu
     * @param {AuthRefreshPostRequest} authRefreshPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshPost: (authRefreshPostRequest: AuthRefreshPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rejestracja użytkownika
     * @param {AuthRegisterPostRequest} authRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost: (authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Mój profil
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMeGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Aktualizacja mojego profilu
     * @param {ProfileUpdateInput} profileUpdateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMePatch: (profileUpdateInput: ProfileUpdateInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Podgląd profilu innego użytkownika
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUserIdGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Dane zalogowanego użytkownika
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Częściowa aktualizacja danych użytkownika
     * @param {UsersMePatchRequest} usersMePatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch: (usersMePatchRequest: UsersMePatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Logowanie użytkownika
     * @param {AuthLoginPostRequest} authLoginPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(authLoginPostRequest: AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokens>>;
    /**
     *
     * @summary Wylogowanie (unieważnienie refresh tokenu)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Odświeżenie tokenu
     * @param {AuthRefreshPostRequest} authRefreshPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshPost(authRefreshPostRequest: AuthRefreshPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokens>>;
    /**
     *
     * @summary Rejestracja użytkownika
     * @param {AuthRegisterPostRequest} authRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthRegisterPost201Response>>;
    /**
     *
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>>;
    /**
     *
     * @summary Mój profil
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>>;
    /**
     *
     * @summary Aktualizacja mojego profilu
     * @param {ProfileUpdateInput} profileUpdateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMePatch(profileUpdateInput: ProfileUpdateInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>>;
    /**
     *
     * @summary Podgląd profilu innego użytkownika
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicProfile>>;
    /**
     *
     * @summary Dane zalogowanego użytkownika
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Częściowa aktualizacja danych użytkownika
     * @param {UsersMePatchRequest} usersMePatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch(usersMePatchRequest: UsersMePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Logowanie użytkownika
     * @param {AuthLoginPostRequest} authLoginPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(authLoginPostRequest: AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthTokens>;
    /**
     *
     * @summary Wylogowanie (unieważnienie refresh tokenu)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Odświeżenie tokenu
     * @param {AuthRefreshPostRequest} authRefreshPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshPost(authRefreshPostRequest: AuthRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthTokens>;
    /**
     *
     * @summary Rejestracja użytkownika
     * @param {AuthRegisterPostRequest} authRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthRegisterPost201Response>;
    /**
     *
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response>;
    /**
     *
     * @summary Mój profil
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Profile>;
    /**
     *
     * @summary Aktualizacja mojego profilu
     * @param {ProfileUpdateInput} profileUpdateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesMePatch(profileUpdateInput: ProfileUpdateInput, options?: RawAxiosRequestConfig): AxiosPromise<Profile>;
    /**
     *
     * @summary Podgląd profilu innego użytkownika
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<PublicProfile>;
    /**
     *
     * @summary Dane zalogowanego użytkownika
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary Częściowa aktualizacja danych użytkownika
     * @param {UsersMePatchRequest} usersMePatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch(usersMePatchRequest: UsersMePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Logowanie użytkownika
     * @param {AuthLoginPostRequest} authLoginPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authLoginPost(authLoginPostRequest: AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthTokens, any>>;
    /**
     *
     * @summary Wylogowanie (unieważnienie refresh tokenu)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authLogoutPost(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Odświeżenie tokenu
     * @param {AuthRefreshPostRequest} authRefreshPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authRefreshPost(authRefreshPostRequest: AuthRefreshPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthTokens, any>>;
    /**
     *
     * @summary Rejestracja użytkownika
     * @param {AuthRegisterPostRequest} authRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthRegisterPost201Response, any>>;
    /**
     *
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    healthGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HealthGet200Response, any>>;
    /**
     *
     * @summary Mój profil
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesMeGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Profile, any>>;
    /**
     *
     * @summary Aktualizacja mojego profilu
     * @param {ProfileUpdateInput} profileUpdateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesMePatch(profileUpdateInput: ProfileUpdateInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Profile, any>>;
    /**
     *
     * @summary Podgląd profilu innego użytkownika
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    profilesUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicProfile, any>>;
    /**
     *
     * @summary Dane zalogowanego użytkownika
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    usersMeGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary Częściowa aktualizacja danych użytkownika
     * @param {UsersMePatchRequest} usersMePatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    usersMePatch(usersMePatchRequest: UsersMePatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
}
