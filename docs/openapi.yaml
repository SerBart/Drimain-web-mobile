openapi: 3.0.3
info:
  title: DriMain API
  description: API for DriMain maintenance management system
  version: 1.0.0
  contact:
    name: DriMain Support
    email: support@drimain.com

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the application. This endpoint is unauthenticated.
      tags:
        - Health
      responses:
        '200':
          description: Application is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "OK"

  /api/auth/login:
    post:
      summary: User authentication
      description: Authenticate user and receive JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      summary: Get current user information
      description: Returns information about the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/raporty:
    get:
      summary: List reports with pagination
      description: Get paginated list of maintenance reports
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
        - name: maszynaId
          in: query
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
        - name: q
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 25
        - name: sort
          in: query
          schema:
            type: string
            default: "dataNaprawy,desc"
      responses:
        '200':
          description: Paginated list of reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaportPage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create new report
      description: Create a new maintenance report
      tags:
        - Reports
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaportCreateRequest'
      responses:
        '201':
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Raport'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/raporty/{id}:
    get:
      summary: Get report by ID
      description: Retrieve a specific maintenance report by its ID
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Raport'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update report
      description: Update an existing maintenance report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaportUpdateRequest'
      responses:
        '200':
          description: Report updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Raport'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete report
      description: Delete a maintenance report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Report deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/zgloszenia:
    get:
      summary: List incidents
      description: Get list of all incidents
      tags:
        - Incidents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of incidents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zgloszenie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create new incident
      description: Create a new incident report
      tags:
        - Incidents
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZgloszenieCreateRequest'
      responses:
        '201':
          description: Incident created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zgloszenie'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/zgloszenia/{id}:
    get:
      summary: Get incident by ID
      description: Retrieve a specific incident by its ID
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Incident details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zgloszenie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Incident not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update incident
      description: Update an existing incident
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZgloszenieUpdateRequest'
      responses:
        '200':
          description: Incident updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zgloszenie'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Incident not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete incident
      description: Delete an incident
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Incident deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Incident not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/czesci:
    get:
      summary: List parts
      description: Get list of all parts with optional filters
      tags:
        - Parts
      security:
        - bearerAuth: []
      parameters:
        - name: kat
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: belowMin
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of parts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create new part
      description: Create a new part
      tags:
        - Parts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartCreateRequest'
      responses:
        '201':
          description: Part created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/czesci/{id}:
    get:
      summary: Get part by ID
      description: Retrieve a specific part by its ID
      tags:
        - Parts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Part details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Part not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update part
      description: Update an existing part
      tags:
        - Parts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartUpdateRequest'
      responses:
        '200':
          description: Part updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Part not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete part
      description: Delete a part
      tags:
        - Parts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Part deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Part not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/czesci/{id}/ilosc:
    patch:
      summary: Update part quantity
      description: Update the quantity of a specific part
      tags:
        - Parts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartQuantityPatch'
      responses:
        '200':
          description: Part quantity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Part not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username for authentication
          example: "admin"
        password:
          type: string
          format: password
          description: Password for authentication
          example: "password123"

    AuthResponse:
      type: object
      required:
        - token
        - expiresAt
        - roles
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time
          example: "2023-12-01T15:30:00Z"
        roles:
          type: array
          items:
            type: string
          description: User roles
          example: ["ADMIN", "USER"]

    UserInfo:
      type: object
      required:
        - username
        - roles
      properties:
        username:
          type: string
          description: Username of the authenticated user
          example: "admin"
        roles:
          type: array
          items:
            type: string
          description: User roles
          example: ["ADMIN", "USER"]

    Raport:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the report
          example: 1
        maszyna:
          $ref: '#/components/schemas/SimpleMaszynaDTO'
        typNaprawy:
          type: string
          description: Type of repair
          example: "Przewijanie silnika"
        opis:
          type: string
          description: Description of the repair
          example: "Wymiana łożysk głównych"
        status:
          $ref: '#/components/schemas/RaportStatus'
        dataNaprawy:
          type: string
          format: date
          description: Date of repair
          example: "2023-12-01"
        czasOd:
          type: string
          description: Start time
          example: "08:00"
        czasDo:
          type: string
          description: End time
          example: "16:00"
        osoba:
          $ref: '#/components/schemas/SimpleOsobaDTO'
        partUsages:
          type: array
          items:
            $ref: '#/components/schemas/PartUsage'

    RaportCreateRequest:
      type: object
      required:
        - typNaprawy
        - dataNaprawy
      properties:
        maszynaId:
          type: integer
          format: int64
          description: ID of the machine
          example: 1
        typNaprawy:
          type: string
          description: Type of repair
          example: "Przewijanie silnika"
        opis:
          type: string
          description: Description of the repair
          example: "Wymiana łożysk głównych"
        osobaId:
          type: integer
          format: int64
          description: ID of the person responsible
          example: 1
        status:
          type: string
          description: Report status
          enum: ["NOWY", "W_TOKU", "OCZEKUJE_CZESCI", "ZAKONCZONE", "ANULOWANE"]
          example: "NOWY"
        dataNaprawy:
          type: string
          format: date
          description: Date of repair
          example: "2023-12-01"
        czasOd:
          type: string
          description: Start time
          example: "08:00"
        czasDo:
          type: string
          description: End time
          example: "16:00"
        partUsages:
          type: array
          items:
            $ref: '#/components/schemas/PartUsage'

    RaportUpdateRequest:
      type: object
      properties:
        typNaprawy:
          type: string
          description: Type of repair
          example: "Przewijanie silnika"
        opis:
          type: string
          description: Description of the repair
          example: "Wymiana łożysk głównych"
        status:
          type: string
          description: Report status
          enum: ["NOWY", "W_TOKU", "OCZEKUJE_CZESCI", "ZAKONCZONE", "ANULOWANE"]
          example: "W_TOKU"
        dataNaprawy:
          type: string
          format: date
          description: Date of repair
          example: "2023-12-01"
        czasOd:
          type: string
          description: Start time
          example: "08:00"
        czasDo:
          type: string
          description: End time
          example: "16:00"
        maszynaId:
          type: integer
          format: int64
          description: ID of the machine
          example: 1
        osobaId:
          type: integer
          format: int64
          description: ID of the person responsible
          example: 1
        partUsages:
          type: array
          items:
            $ref: '#/components/schemas/PartUsage'

    RaportStatus:
      type: string
      enum: ["NOWY", "W_TOKU", "OCZEKUJE_CZESCI", "ZAKONCZONE", "ANULOWANE"]
      description: Status of the repair report

    RaportPage:
      type: object
      description: Paginated response for reports (Spring Page format)
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Raport'
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            pageNumber:
              type: integer
            pageSize:
              type: integer
            offset:
              type: integer
            paged:
              type: boolean
            unpaged:
              type: boolean
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        last:
          type: boolean
        numberOfElements:
          type: integer
        first:
          type: boolean
        sort:
          type: object
          properties:
            sorted:
              type: boolean
            unsorted:
              type: boolean
        size:
          type: integer
        number:
          type: integer

    SimpleMaszynaDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Machine ID
          example: 1
        nazwa:
          type: string
          description: Machine name
          example: "Tokarka CNC T-1"

    SimpleOsobaDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Person ID
          example: 1
        imieNazwisko:
          type: string
          description: Full name
          example: "Jan Kowalski"

    Part:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Part ID
          example: 1
        nazwa:
          type: string
          description: Part name
          example: "Łożysko 6001"
        kod:
          type: string
          description: Part code
          example: "LOZ-6001"
        kategoria:
          type: string
          description: Part category
          example: "Łożyska"
        ilosc:
          type: integer
          description: Current quantity
          example: 50
        minIlosc:
          type: integer
          description: Minimum required quantity
          example: 10
        jednostka:
          type: string
          description: Unit of measurement
          example: "szt."

    PartCreateRequest:
      type: object
      required:
        - nazwa
        - kod
      properties:
        nazwa:
          type: string
          description: Part name
          example: "Łożysko 6001"
        kod:
          type: string
          description: Part code
          example: "LOZ-6001"
        kategoria:
          type: string
          description: Part category
          example: "Łożyska"
        ilosc:
          type: integer
          description: Initial quantity
          example: 50
        minIlosc:
          type: integer
          description: Minimum required quantity
          example: 10
        jednostka:
          type: string
          description: Unit of measurement
          example: "szt."

    PartUpdateRequest:
      type: object
      properties:
        nazwa:
          type: string
          description: Part name
          example: "Łożysko 6001"
        kod:
          type: string
          description: Part code
          example: "LOZ-6001"
        kategoria:
          type: string
          description: Part category
          example: "Łożyska"
        minIlosc:
          type: integer
          description: Minimum required quantity
          example: 10
        jednostka:
          type: string
          description: Unit of measurement
          example: "szt."

    PartQuantityPatch:
      type: object
      description: Patch object for updating part quantity. Use either delta or value, not both.
      oneOf:
        - type: object
          required:
            - delta
          properties:
            delta:
              type: integer
              description: Change in quantity (positive or negative)
              example: -5
        - type: object
          required:
            - value
          properties:
            value:
              type: integer
              description: Absolute value to set
              example: 25

    PartUsage:
      type: object
      properties:
        partId:
          type: integer
          format: int64
          description: ID of the part used
          example: 1
        ilosc:
          type: integer
          description: Quantity used
          example: 2

    Zgloszenie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Incident ID
          example: 1
        typ:
          type: string
          description: Type of incident
          example: "Awaria"
        imie:
          type: string
          description: Reporter first name
          example: "Jan"
        nazwisko:
          type: string
          description: Reporter last name
          example: "Kowalski"
        status:
          $ref: '#/components/schemas/ZgloszenieStatus'
        opis:
          type: string
          description: Incident description
          example: "Maszyna nie uruchamia się"
        dataGodzina:
          type: string
          format: date-time
          description: Incident date and time
          example: "2023-12-01T10:30:00"
        hasPhoto:
          type: boolean
          description: Whether the incident has an associated photo
          example: false

    ZgloszenieCreateRequest:
      type: object
      required:
        - typ
        - imie
        - nazwisko
        - opis
      properties:
        typ:
          type: string
          description: Type of incident
          example: "Awaria"
        imie:
          type: string
          description: Reporter first name
          example: "Jan"
        nazwisko:
          type: string
          description: Reporter last name
          example: "Kowalski"
        status:
          type: string
          description: Initial status
          enum: ["OPEN", "IN_PROGRESS", "ON_HOLD", "DONE", "REJECTED"]
          example: "OPEN"
        opis:
          type: string
          description: Incident description
          example: "Maszyna nie uruchamia się"
        dataGodzina:
          type: string
          format: date-time
          description: Incident date and time (optional, defaults to current time)
          example: "2023-12-01T10:30:00"
        photoBase64:
          type: string
          description: Base64 encoded photo (optional)

    ZgloszenieUpdateRequest:
      type: object
      properties:
        typ:
          type: string
          description: Type of incident
          example: "Awaria"
        imie:
          type: string
          description: Reporter first name
          example: "Jan"
        nazwisko:
          type: string
          description: Reporter last name
          example: "Kowalski"
        status:
          type: string
          description: Incident status
          enum: ["OPEN", "IN_PROGRESS", "ON_HOLD", "DONE", "REJECTED"]
          example: "IN_PROGRESS"
        opis:
          type: string
          description: Incident description
          example: "Maszyna nie uruchamia się"
        dataGodzina:
          type: string
          format: date-time
          description: Incident date and time
          example: "2023-12-01T10:30:00"
        photoBase64:
          type: string
          description: Base64 encoded photo (optional)

    ZgloszenieStatus:
      type: string
      enum: ["OPEN", "IN_PROGRESS", "ON_HOLD", "DONE", "REJECTED"]
      description: Status of the incident

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
        - status
      properties:
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error message
          example: "Invalid input data"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2023-12-01T10:30:00Z"
        status:
          type: integer
          description: HTTP status code
          example: 400